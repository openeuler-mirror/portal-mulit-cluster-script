#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import copy
import json
import os

# expected output format:
# [{"jobId":"2035","jobIndex":"1","jobName":"new[1]","user":"admin","sourceCluster":"cluster1","stat":"DONE",
# "queue":"normal01","fromHost":"host2","submitTime":"Jun 16 17:43:11 2021","startTime":"Jun 16 17:43:12 2021",
# "finishTime":"Jun 16 17:44:54 2021","execHome":"/home/admin","outputFile":"","errorFile":"","jobPriority":"","
# execHost":"host2","CPU_USED":"00:00:02","jobDescription":"","exitCode":"","pendReason":"","jobRunTime":"00:01:42"}]
JOB_INFOS_CMD = 'source @SCHEDULER_PROFILE_PATH@;' \
                'timeout 10 bjobs -a -u all -hms -o \"jobid jobindex job_name user source_cluster stat ' \
                'queue from_host submit_time start_time finish_time exec_home output_dir output_file error_file job_priority ' \
                'exec_host job_description exit_code exit_reason pend_reason run_time delimiter=\'^\'\"'

ARRAY_JOB_INFO_CMD = 'source @SCHEDULER_PROFILE_PATH@; timeout 10 bjobs -A -w '

ARRAY_SIZE_QUERY_CMD = 'source @SCHEDULER_PROFILE_PATH@; timeout 10 bjobs -a -o \"jobindex\" '
JOB_INFO_CMD = 'source @SCHEDULER_PROFILE_PATH@; timeout 10 bjobs '
# jobstatemap for ccp
statMap = {'UNKWN': -1, 'RUN': 4, 'PSUSP': 2, 'USUSP': 2, 'SSUSP': 10, 'PEND': 1, 'DONE': 9, 'EXIT': 5, 'WAIT': 3, 'ZOMBI': -1}

# 作业查询字段数组
jobFields = ['JOBID','JOBINDEX','JOB_NAME','USER','SOURCE_CLUSTER','STAT','QUEUE','FROM_HOST','SUBMIT_TIME','START_TIME','FINISH_TIME','EXEC_HOME','OUTPUT_DIR','OUTPUT_FILE','ERROR_FILE','JOB_PRIORITY','EXEC_HOST','JOB_DESCRIPTION','EXIT_CODE','EXIT_REASON','PEND_REASON','RUN_TIME']

# 聚合数组作业父作业状态
# arrayJobInfoValue 格式样例：[0, 0, 5, 0, 0, 0] 状态依次为PEND DONE  RUN EXIT （USUSP+PSUSP）SSUSP
def aggJobState(parentJobinfo, arrayJobStatArr):
    if len(arrayJobStatArr) < 7:
        parentJobinfo['stat'] = 'UNKWN'
        return
    runNum = int(arrayJobStatArr[2])
    if runNum > 0:
        parentJobinfo['stat'] = 'RUN'
        return
    usupNum = int(arrayJobStatArr[4])
    if usupNum > 0:
        parentJobinfo['stat'] = 'USUSP'
        return
    ssuspNum = int(arrayJobStatArr[5])
    if ssuspNum > 0:
        parentJobinfo['stat'] = 'SSUSP'
        return
    pendNum = int(arrayJobStatArr[0])
    if pendNum > 0:
        parentJobinfo['stat'] = 'PEND'
        return
    exitNum = int(arrayJobStatArr[3])
    if exitNum > 0:
        parentJobinfo['stat'] = 'EXIT'
        return
    doneNum = int(arrayJobStatArr[1])
    if doneNum > 0:
        parentJobinfo['stat'] = 'DONE'
        return
    doneNum = int(arrayJobStatArr[6])
    if doneNum > 0:
        parentJobinfo['stat'] = 'ZOMBI'
        return
    parentJobinfo['stat'] = 'UNKWN'
    return

# 转换作业数据为json格式
def strToJson(jobInfoStr):
    jobInfoArr = jobInfoStr.split("^")
    jobInfo = {}
    for index in range(len(jobFields)):
        field = jobInfoArr[index]
        if field == '-':
            field = ''
        jobInfo[jobFields[index]] = field
    return jobInfo

jobInfos = os.popen(JOB_INFOS_CMD).read()
jobInfosArr = jobInfos.strip().split("\n")

# 构造非数组作业及数组作业子作业信息 及数组作业状态表
outputJobList = []
for index in range(len(jobInfosArr)):
    if index == 0:
        continue
    jobInfo = strToJson(jobInfosArr[index])
    jobInfo['OUTPUT_DIR'] = jobInfo['OUTPUT_DIR'].rstrip('/')
    if not statMap.has_key(jobInfo['STAT']):
        statMap[jobInfo['STAT']]=-1
    # 替换key值为期望解析值
    outputJob = {'jobId': jobInfo['JOBID'], 'jobIndex': jobInfo['JOBINDEX'], 'jobName': jobInfo['JOB_NAME'],
                 'user': jobInfo['USER'], 'sourceCluster': jobInfo['SOURCE_CLUSTER'],
                 'stat': str(statMap[jobInfo['STAT']]),
                 'queue': jobInfo['QUEUE'], 'fromHost': jobInfo['FROM_HOST'], 'submitTime': jobInfo['SUBMIT_TIME'],
                 'startTime': jobInfo['START_TIME'], 'finishTime': jobInfo['FINISH_TIME'],
                 'execHome': jobInfo['OUTPUT_DIR'], 'outputFile': jobInfo['OUTPUT_FILE'],
                 'errorFile': jobInfo['ERROR_FILE'], 'jobPriority': jobInfo['JOB_PRIORITY'],
                 'execHost': jobInfo['EXEC_HOST'], 'jobDescription': jobInfo['JOB_DESCRIPTION'],
                 'exitCode': jobInfo['EXIT_CODE'], 'pendReason': jobInfo['PEND_REASON'],
                 'jobRunTime': jobInfo['RUN_TIME'], 'originState': jobInfo['STAT'], 'exitMsg': jobInfo['EXIT_REASON']}
    if outputJob['execHome'] == '':
        outputJob['execHome'] = jobInfo['EXEC_HOME']
    jobId = outputJob['jobId']
    bjobInfo = os.popen(JOB_INFO_CMD + jobId).read().splitlines()
    arraySize = len(os.popen(ARRAY_SIZE_QUERY_CMD + jobId).read().splitlines()) - 1
    # 判断是否为数组作业
    if len(bjobInfo) > 2:
        arrayJobInfo = os.popen(ARRAY_JOB_INFO_CMD + jobId).read().splitlines()
        arrayJobInfoValue = arrayJobInfo[1].split()
        if len(arrayJobInfoValue) > 2:
            outputJob['jobId'] = "{}.{}".format(jobId, outputJob['jobIndex'])
            outputJob['jobIndex'] = 0
            if arraySize > 1:
                outputJob['arraySize'] = arraySize
    outputJobList.append(outputJob)

outputStr = json.dumps(outputJobList)
print(outputStr)
